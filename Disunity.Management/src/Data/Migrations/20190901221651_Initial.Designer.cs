// <auto-generated />
using System;
using Disunity.Management.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Disunity.Management.src.Data.Migrations
{
    [DbContext(typeof(ManagementDbContext))]
    [Migration("20190901221651_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Disunity.Management.Models.DisunityDistroIdentifier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("DisunityDistroIdentifier");

                    b.HasDiscriminator().HasValue("DisunityDistroIdentifier");
                });

            modelBuilder.Entity("Disunity.Management.Models.Package", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int?>("VersionSetId");

                    b.HasKey("Id");

                    b.HasIndex("VersionSetId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Disunity.Management.Models.ProfileMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisunityDistroId");

                    b.Property<string>("Mods")
                        .IsRequired();

                    b.Property<string>("PackageId");

                    b.HasKey("Id");

                    b.HasIndex("DisunityDistroId");

                    b.HasIndex("PackageId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Disunity.Management.Models.TargetMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveProfileId");

                    b.Property<string>("DisplayName");

                    b.Property<string>("ExecutablePath");

                    b.Property<string>("ManagedPath");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.HasIndex("ActiveProfileId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Disunity.Management.Models.TargetProfile", b =>
                {
                    b.Property<Guid>("ProfileMetaId");

                    b.Property<int>("TargetMetaId");

                    b.HasKey("ProfileMetaId", "TargetMetaId");

                    b.HasIndex("TargetMetaId");

                    b.ToTable("TargetProfiles");
                });

            modelBuilder.Entity("Disunity.Management.Models.VersionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("VersionSet");
                });

            modelBuilder.Entity("Disunity.Management.Models.VersionSetPackage", b =>
                {
                    b.Property<int>("VersionSetId");

                    b.Property<string>("PackageId");

                    b.HasKey("VersionSetId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("VersionSetPackage");
                });

            modelBuilder.Entity("Disunity.Management.Models.Package", b =>
                {
                    b.HasOne("Disunity.Management.Models.VersionSet")
                        .WithMany("Packages")
                        .HasForeignKey("VersionSetId");
                });

            modelBuilder.Entity("Disunity.Management.Models.ProfileMeta", b =>
                {
                    b.HasOne("Disunity.Management.Models.DisunityDistroIdentifier", "DisunityDistro")
                        .WithMany()
                        .HasForeignKey("DisunityDistroId");

                    b.HasOne("Disunity.Management.Models.Package")
                        .WithMany("References")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("Disunity.Management.Models.TargetMeta", b =>
                {
                    b.HasOne("Disunity.Management.Models.ProfileMeta", "ActiveProfile")
                        .WithMany()
                        .HasForeignKey("ActiveProfileId");
                });

            modelBuilder.Entity("Disunity.Management.Models.TargetProfile", b =>
                {
                    b.HasOne("Disunity.Management.Models.ProfileMeta", "ProfileMeta")
                        .WithMany("Targets")
                        .HasForeignKey("ProfileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Disunity.Management.Models.TargetMeta", "TargetMeta")
                        .WithMany("Profiles")
                        .HasForeignKey("TargetMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Disunity.Management.Models.VersionSetPackage", b =>
                {
                    b.HasOne("Disunity.Management.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Disunity.Management.Models.VersionSet", "VersionSet")
                        .WithMany("VersionSetPackages")
                        .HasForeignKey("VersionSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
