using System;
using System.ComponentModel;
using System.Runtime.Serialization;


namespace Disunity.Management.Models {
    
    [TypeConverter(typeof(ModConverter))]
    public class Mod  {

        /// <summary>
        /// The name of this mod
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The name of the owner of this mod
        /// </summary>
        public string Owner { get; set; }

        /// <summary>
        /// The full name of the mod. Autogenerated from <code>{Owner}/{Name}</code>
        /// </summary>
        public string FullName => $"{Owner}/{Name}";

        public override string ToString() {
            return FullName;
        }

        protected bool Equals(Mod other) {
            return string.Equals(Name, other.Name) && string.Equals(Owner, other.Owner);
        }

        public override bool Equals(object obj) {
            if (ReferenceEquals(null, obj)) {
                return false;
            }

            if (ReferenceEquals(this, obj)) {
                return true;
            }

            if (obj.GetType() != this.GetType()) {
                return false;
            }

            return Equals((Mod) obj);
        }

        public override int GetHashCode() {
            unchecked {
                return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Owner != null ? Owner.GetHashCode() : 0);
            }
        }

    }

}